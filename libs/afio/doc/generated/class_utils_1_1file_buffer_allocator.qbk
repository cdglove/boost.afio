[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml/classboost_1_1afio_1_1utils_1_1file__buffer__allocator.xml]
[section:utils_file_buffer_allocator utils::file_buffer_allocator]

'''<indexterm><primary>utils</primary></indexterm><indexterm><primary>file_buffer_allocator</primary></indexterm>'''
An STL allocator which allocates large TLB page memory.If the operating system is configured to allow it, this type of memory is particularly efficient for doing large scale file i/o. This is because the kernel must normally convert the scatter gather buffers you pass into extended scatter gather buffers as the memory you see as contiguous may not, and probably isn't, actually be contiguous in physical memory. Regions returned by this allocator ['may] be allocated contiguously in physical memory and therefore the kernel can pass through your scatter gather buffers unmodified. 

[heading Description]
A particularly useful combination with this allocator is with the page\u005fsizes() member function of [*afio_dispatcher]. This will return which pages sizes are possible, and which page sizes are enabled for this user. If writing a file copy routine for example, using this allocator with the largest page size as the copy chunk makes a great deal of sense.

Be aware that as soon as the allocation exceeds a large page size, most systems allocate in multiples of the large page size, so if the large page size were 2Mb and you allocate 2Mb + 1 byte, 4Mb is actually consumed. 

[heading Synopsis]
``template<typename T>
class utils::file_buffer_allocator
{
  // ...
};
``

[heading Template parameter(s)]
[table
[[Parameter] [Description]]
[[typename T] []]
]

[heading Constructor(s)]
[table
[[Function] [Description] [Parameters] ]
[[``file_buffer_allocator()``

] [] [


]]
[[``template<class U>
file_buffer_allocator(const file_buffer_allocator< U > & )``

] [] [[* const file_buffer_allocator< U > &]: [']:  




]]
]

[heading Member Function(s)]
[table
[[Function] [Description] [Parameters]  [Returns]]
[[``size_type max_size()``

] [] [


]]
[[``pointer address(reference x)``

] [] [[* reference]: ['x]:  




]]
[[``const_pointer address(const_reference x)``

] [] [[* const_reference]: ['x]:  




]]
[[``pointer allocate(size_type n, const void * hint = 0)``

] [] [[* size_type]: ['n]:  

[* const void *]: ['hint]:  




]]
[[``void deallocate(pointer p, size_type n)``

] [] [[* pointer]: ['p]:  

[* size_type]: ['n]:  




]]
[[``template<class U, class... Args>
void construct(U * p, Args &&... args)``

] [] [[* U *]: ['p]:  

[* Args &&...]: ['args]:  




]]
[[``template<class U>
void destroy(U * p)``

] [] [[* U *]: ['p]:  




]]
]

[heading Header]
`#include <boost/afio/afio.hpp>`

[endsect]

