[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml/structboost_1_1afio_1_1path_1_1make__absolute.xml]
[section:path_make_absolute path::make_absolute]

'''<indexterm><primary>path</primary></indexterm><indexterm><primary>make_absolute</primary></indexterm>'''
Makes a path absolute according to the current working directory. 

[heading Synopsis]
``struct path::make_absolute
      : public path
{
  // ...
};
``

[heading Constructor(s)]
[table
[[Function] [Description] [Parameters] ]
[[``make_absolute(const path & p)``

] [] [[* const path &]: ['p]:  




]]
[[``make_absolute(path && p)``

] [] [[* path &&]: ['p]:  




]]
[[``template<class T, typename>
make_absolute(T && p)``

] [] [[* T &&]: ['p]:  




]]
]

[heading Member Function(s)]
[table
[[Function] [Description] [Parameters]  [Returns]]
[[``template<class Source>
path & assign(Source const & source)``

] [Converts source to AFIO path format. ] [[* Source const &]: ['source]:  




]]
[[``template<class InputIterator>
path & assign(InputIterator begin, InputIterator end)``

] [] [[* InputIterator]: ['begin]:  

[* InputIterator]: ['end]:  




]]
[[``path & operator/=(const path & p)``

] [] [[* const path &]: ['p]:  




]]
[[``template<class Source>
path & operator/=(Source const & source)``

] [] [[* Source const &]: ['source]:  




]]
[[``template<class Source>
path & append(Source const & source)``

] [] [[* Source const &]: ['source]:  




]]
[[``template<class InputIterator>
path & append(InputIterator begin, InputIterator end)``

] [] [[* InputIterator]: ['begin]:  

[* InputIterator]: ['end]:  




]]
[[``path & operator+=(const path & x)``

] [] [[* const path &]: ['x]:  




]]
[[``path & operator+=(const string_type & x)``

] [] [[* const string_type &]: ['x]:  




]]
[[``path & operator+=(const value_type * x)``

] [] [[* const value_type *]: ['x]:  




]]
[[``path & operator+=(value_type x)``

] [] [[* value_type]: ['x]:  




]]
[[``template<class Source>
path & operator+=(Source const & x)``

] [] [[* Source const &]: ['x]:  




]]
[[``template<class Source>
path & concat(Source const & x)``

] [] [[* Source const &]: ['x]:  




]]
[[``template<class InputIterator>
path & concat(InputIterator begin, InputIterator end)``

] [] [[* InputIterator]: ['begin]:  

[* InputIterator]: ['end]:  




]]
[[``path & make_preferred()``

] [] [


]]
[[``path & remove_filename()``

] [] [


]]
[[``path & replace_extension(const path & new_extension = path())``

] [] [[* const path &]: ['new_extension]:  




]]
[[``path root_name()``

] [] [


]]
[[``path root_directory()``

] [] [


]]
[[``path root_path()``

] [] [


]]
[[``path relative_path()``

] [] [


]]
[[``path parent_path()``

] [] [


]]
[[``path filename()``

] [] [


]]
[[``path stem()``

] [] [


]]
[[``path extension()``

] [] [


]]
[[``iterator begin()``

] [] [


]]
[[``iterator end()``

] [] [


]]
[[``filesystem::path filesystem_path()``

] [Return a normalised filesystem::path from an AFIO path. ] [


]]
]

[heading Header]
`#include <boost/afio/afio.hpp>`

[endsect]

