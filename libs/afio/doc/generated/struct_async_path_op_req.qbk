[/============================================================================
  Boost.AFIO

  Use, modification and distribution is subject to the Boost Software License,
  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt)
=============================================================================/]


[/ Generated by doxygen_xml2qbk 1.1.1, don't change, will be overwritten automatically]
[/ Generated from doxy/doxygen_output/xml/structboost_1_1afio_1_1async__path__op__req.xml]
[section:async_path_op_req async_path_op_req]

'''<indexterm><primary>async_path_op_req</primary></indexterm>'''
A convenience bundle of path and flags, with optional precondition. Paths may be a path fragment (relative to the precondition) or absolute, in which case if necessary they are made canonical and absolute in the constructor according to the current working directory. 

[heading Synopsis]
``struct async_path_op_req
{
  bool is_relative;          // Whether the precondition is also where this path begins. 
  boost::afio::path path;    // The filing system path to be used for this operation. 
  file_flags flags;          // The flags to be used for this operation (note they can be overriden by flags passed during dispatcher construction). 
  async_io_op precondition;  // An optional precondition for this operation 
};
``

[heading Constructor(s)]
[table
[[Function] [Description] [Parameters] ]
[[``async_path_op_req()``

] [Default constructor. ] [


]]
[[``async_path_op_req(const async_path_op_req & o)``

] [Copy constructor. ] [[* const async_path_op_req &]: ['o]:  




]]
[[``async_path_op_req(async_path_op_req && o)``

] [Move constructor. ] [[* async_path_op_req &&]: ['o]:  




]]
[[``async_path_op_req(absolute && o)``

] [Move constructor. ] [[* absolute &&]: ['o]:  




]]
[[``async_path_op_req(relative && o)``

] [Move constructor. ] [[* relative &&]: ['o]:  




]]
[[``template<class T, typename>
async_path_op_req(T && _path, file_flags _flags = file_flags::None)``

] [Constructs an instance. ] [[* T &&]: ['_path]:  The filing system path to be used. 

[* file_flags]: ['_flags]:  The flags to be used. 




]]
[[``template<class T, typename>
async_path_op_req(bool _is_relative, async_io_op _precondition, T && _path, file_flags _flags = file_flags::None)``

] [Constructs an instance. ] [[* bool]: ['_is_relative]:  Whether the precondition is where the path begins 

[* async_io_op]: ['_precondition]:  The precondition for this operation. 

[* T &&]: ['_path]:  The filing system path to be used. 

[* file_flags]: ['_flags]:  The flags to be used. 




]]
[[``async_path_op_req(bool _is_relative, async_io_op _precondition, boost::afio::path _path, file_flags _flags = file_flags::None)``

] [] [[* bool]: ['_is_relative]:  

[* async_io_op]: ['_precondition]:  

[* boost::afio::path]: ['_path]:  

[* file_flags]: ['_flags]:  




]]
[[``async_path_op_req(async_io_op _precondition, file_flags _flags = file_flags::None)``

] [Constructs an instance. ] [[* async_io_op]: ['_precondition]:  The precondition for this operation (used as the path). 

[* file_flags]: ['_flags]:  The flags to be used. 




]]
]

[heading Member Function(s)]
[table
[[Function] [Description] [Parameters]  [Returns]]
[[``bool validate()``

] [Validates contents. ] [


]]
]

[heading Header]
`#include <boost/afio/afio.hpp>`

[include generated/struct_async_path_op_req_1_1absolute.qbk]
[include generated/struct_async_path_op_req_1_1relative.qbk]

[endsect]

